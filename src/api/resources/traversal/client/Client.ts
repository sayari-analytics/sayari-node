/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Sayari from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Traversal {
    interface Options {
        environment?: core.Supplier<environments.SayariEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Traversal {
    constructor(protected readonly _options: Traversal.Options = {}) {}

    /**
     * The Traversal endpoint returns paths from a single target entity to up to 50 directly or indirectly-related entities. Each path includes information on the 0 to 10 intermediary entities, as well as their connecting relationships. The response's explored_count field indicates the size of the graph subset the application searched. Running a traversal on a highly connected entity with a restrictive set of argument filters and a high max depth will require the application to explore a higher number of traversal paths, which may affect performance. In cases where a traversal searches over a very large, highly-connected subgraph, a partial result set may be returned containing only the most relevant results. This will be indicated in the response by the partial_results field.
     *
     * @param {string} id - Unique identifier of the entity
     * @param {Sayari.Traversal} request
     * @param {Traversal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sayari.BadRequest}
     * @throws {@link Sayari.Unauthorized}
     * @throws {@link Sayari.NotFound}
     * @throws {@link Sayari.MethodNotAllowed}
     * @throws {@link Sayari.RateLimitExceeded}
     * @throws {@link Sayari.InternalServerError}
     * @throws {@link Sayari.BadGateway}
     * @throws {@link Sayari.ConnectionError}
     *
     * @example
     *     await client.traversal.traversal("mGq1lpuqKssNWTjIokuPeA", {
     *         limit: 1
     *     })
     */
    public async traversal(
        id: string,
        request: Sayari.Traversal = {},
        requestOptions?: Traversal.RequestOptions
    ): Promise<Sayari.TraversalResponse> {
        const {
            limit,
            offset,
            minDepth,
            maxDepth,
            relationships,
            psa,
            countries,
            types,
            sanctioned,
            pep,
            minShares,
            includeUnknownShares,
            excludeFormerRelationships,
            excludeClosedEntities,
            euHighRiskThird,
            reputationalRiskModernSlavery,
            stateOwned,
            formerlySanctioned,
            reputationalRiskTerrorism,
            reputationalRiskOrganizedCrime,
            reputationalRiskFinancialCrime,
            reputationalRiskBriberyAndCorruption,
            reputationalRiskOther,
            reputationalRiskCybercrime,
            regulatoryAction,
            lawEnforcementAction,
            xinjiangGeospatial,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (minDepth != null) {
            _queryParams["min_depth"] = minDepth.toString();
        }

        if (maxDepth != null) {
            _queryParams["max_depth"] = maxDepth.toString();
        }

        if (relationships != null) {
            if (Array.isArray(relationships)) {
                _queryParams["relationships"] = relationships.map((item) => item);
            } else {
                _queryParams["relationships"] = relationships;
            }
        }

        if (psa != null) {
            _queryParams["psa"] = psa.toString();
        }

        if (countries != null) {
            if (Array.isArray(countries)) {
                _queryParams["countries"] = countries.map((item) => item);
            } else {
                _queryParams["countries"] = countries;
            }
        }

        if (types != null) {
            if (Array.isArray(types)) {
                _queryParams["types"] = types.map((item) => item);
            } else {
                _queryParams["types"] = types;
            }
        }

        if (sanctioned != null) {
            _queryParams["sanctioned"] = sanctioned.toString();
        }

        if (pep != null) {
            _queryParams["pep"] = pep.toString();
        }

        if (minShares != null) {
            _queryParams["min_shares"] = minShares.toString();
        }

        if (includeUnknownShares != null) {
            _queryParams["include_unknown_shares"] = includeUnknownShares.toString();
        }

        if (excludeFormerRelationships != null) {
            _queryParams["exclude_former_relationships"] = excludeFormerRelationships.toString();
        }

        if (excludeClosedEntities != null) {
            _queryParams["exclude_closed_entities"] = excludeClosedEntities.toString();
        }

        if (euHighRiskThird != null) {
            _queryParams["eu_high_risk_third"] = euHighRiskThird.toString();
        }

        if (reputationalRiskModernSlavery != null) {
            _queryParams["reputational_risk_modern_slavery"] = reputationalRiskModernSlavery.toString();
        }

        if (stateOwned != null) {
            _queryParams["state_owned"] = stateOwned.toString();
        }

        if (formerlySanctioned != null) {
            _queryParams["formerly_sanctioned"] = formerlySanctioned.toString();
        }

        if (reputationalRiskTerrorism != null) {
            _queryParams["reputational_risk_terrorism"] = reputationalRiskTerrorism.toString();
        }

        if (reputationalRiskOrganizedCrime != null) {
            _queryParams["reputational_risk_organized_crime"] = reputationalRiskOrganizedCrime.toString();
        }

        if (reputationalRiskFinancialCrime != null) {
            _queryParams["reputational_risk_financial_crime"] = reputationalRiskFinancialCrime.toString();
        }

        if (reputationalRiskBriberyAndCorruption != null) {
            _queryParams["reputational_risk_bribery_and_corruption"] = reputationalRiskBriberyAndCorruption.toString();
        }

        if (reputationalRiskOther != null) {
            _queryParams["reputational_risk_other"] = reputationalRiskOther.toString();
        }

        if (reputationalRiskCybercrime != null) {
            _queryParams["reputational_risk_cybercrime"] = reputationalRiskCybercrime.toString();
        }

        if (regulatoryAction != null) {
            _queryParams["regulatory_action"] = regulatoryAction.toString();
        }

        if (lawEnforcementAction != null) {
            _queryParams["law_enforcement_action"] = lawEnforcementAction.toString();
        }

        if (xinjiangGeospatial != null) {
            _queryParams["xinjiang_geospatial"] = xinjiangGeospatial.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SayariEnvironment.Production,
                `/v1/traversal/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sayari/sdk",
                "X-Fern-SDK-Version": "0.1.25",
                "User-Agent": "@sayari/sdk/0.1.25",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TraversalResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sayari.BadRequest(
                        serializers.BadRequestResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new Sayari.Unauthorized(
                        serializers.UnauthorizedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Sayari.NotFound(
                        serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 405:
                    throw new Sayari.MethodNotAllowed(
                        serializers.MethodNotAllowedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Sayari.RateLimitExceeded(
                        serializers.RateLimitResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Sayari.InternalServerError(
                        serializers.InternalServerErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 502:
                    throw new Sayari.BadGateway(
                        serializers.BadGatewayResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 520:
                    throw new Sayari.ConnectionError(
                        serializers.ConnectionErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SayariError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SayariError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SayariTimeoutError();
            case "unknown":
                throw new errors.SayariError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * The UBO endpoint returns paths from a single target entity to up to 50 beneficial owners. The endpoint is a shorthand for the equivalent traversal query.
     *
     * @param {string} id - Unique identifier of the entity
     * @param {Sayari.Ubo} request
     * @param {Traversal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sayari.BadRequest}
     * @throws {@link Sayari.Unauthorized}
     * @throws {@link Sayari.NotFound}
     * @throws {@link Sayari.MethodNotAllowed}
     * @throws {@link Sayari.RateLimitExceeded}
     * @throws {@link Sayari.InternalServerError}
     * @throws {@link Sayari.BadGateway}
     * @throws {@link Sayari.ConnectionError}
     *
     * @example
     *     await client.traversal.ubo("mGq1lpuqKssNWTjIokuPeA", {
     *         limit: 1
     *     })
     */
    public async ubo(
        id: string,
        request: Sayari.Ubo = {},
        requestOptions?: Traversal.RequestOptions
    ): Promise<Sayari.TraversalResponse> {
        const {
            limit,
            offset,
            minDepth,
            maxDepth,
            relationships,
            psa,
            countries,
            types,
            sanctioned,
            pep,
            minShares,
            includeUnknownShares,
            excludeFormerRelationships,
            excludeClosedEntities,
            euHighRiskThird,
            reputationalRiskModernSlavery,
            stateOwned,
            formerlySanctioned,
            reputationalRiskTerrorism,
            reputationalRiskOrganizedCrime,
            reputationalRiskFinancialCrime,
            reputationalRiskBriberyAndCorruption,
            reputationalRiskOther,
            reputationalRiskCybercrime,
            regulatoryAction,
            lawEnforcementAction,
            xinjiangGeospatial,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (minDepth != null) {
            _queryParams["min_depth"] = minDepth.toString();
        }

        if (maxDepth != null) {
            _queryParams["max_depth"] = maxDepth.toString();
        }

        if (relationships != null) {
            if (Array.isArray(relationships)) {
                _queryParams["relationships"] = relationships.map((item) => item);
            } else {
                _queryParams["relationships"] = relationships;
            }
        }

        if (psa != null) {
            _queryParams["psa"] = psa.toString();
        }

        if (countries != null) {
            if (Array.isArray(countries)) {
                _queryParams["countries"] = countries.map((item) => item);
            } else {
                _queryParams["countries"] = countries;
            }
        }

        if (types != null) {
            if (Array.isArray(types)) {
                _queryParams["types"] = types.map((item) => item);
            } else {
                _queryParams["types"] = types;
            }
        }

        if (sanctioned != null) {
            _queryParams["sanctioned"] = sanctioned.toString();
        }

        if (pep != null) {
            _queryParams["pep"] = pep.toString();
        }

        if (minShares != null) {
            _queryParams["min_shares"] = minShares.toString();
        }

        if (includeUnknownShares != null) {
            _queryParams["include_unknown_shares"] = includeUnknownShares.toString();
        }

        if (excludeFormerRelationships != null) {
            _queryParams["exclude_former_relationships"] = excludeFormerRelationships.toString();
        }

        if (excludeClosedEntities != null) {
            _queryParams["exclude_closed_entities"] = excludeClosedEntities.toString();
        }

        if (euHighRiskThird != null) {
            _queryParams["eu_high_risk_third"] = euHighRiskThird.toString();
        }

        if (reputationalRiskModernSlavery != null) {
            _queryParams["reputational_risk_modern_slavery"] = reputationalRiskModernSlavery.toString();
        }

        if (stateOwned != null) {
            _queryParams["state_owned"] = stateOwned.toString();
        }

        if (formerlySanctioned != null) {
            _queryParams["formerly_sanctioned"] = formerlySanctioned.toString();
        }

        if (reputationalRiskTerrorism != null) {
            _queryParams["reputational_risk_terrorism"] = reputationalRiskTerrorism.toString();
        }

        if (reputationalRiskOrganizedCrime != null) {
            _queryParams["reputational_risk_organized_crime"] = reputationalRiskOrganizedCrime.toString();
        }

        if (reputationalRiskFinancialCrime != null) {
            _queryParams["reputational_risk_financial_crime"] = reputationalRiskFinancialCrime.toString();
        }

        if (reputationalRiskBriberyAndCorruption != null) {
            _queryParams["reputational_risk_bribery_and_corruption"] = reputationalRiskBriberyAndCorruption.toString();
        }

        if (reputationalRiskOther != null) {
            _queryParams["reputational_risk_other"] = reputationalRiskOther.toString();
        }

        if (reputationalRiskCybercrime != null) {
            _queryParams["reputational_risk_cybercrime"] = reputationalRiskCybercrime.toString();
        }

        if (regulatoryAction != null) {
            _queryParams["regulatory_action"] = regulatoryAction.toString();
        }

        if (lawEnforcementAction != null) {
            _queryParams["law_enforcement_action"] = lawEnforcementAction.toString();
        }

        if (xinjiangGeospatial != null) {
            _queryParams["xinjiang_geospatial"] = xinjiangGeospatial.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SayariEnvironment.Production,
                `/v1/ubo/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sayari/sdk",
                "X-Fern-SDK-Version": "0.1.25",
                "User-Agent": "@sayari/sdk/0.1.25",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TraversalResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sayari.BadRequest(
                        serializers.BadRequestResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new Sayari.Unauthorized(
                        serializers.UnauthorizedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Sayari.NotFound(
                        serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 405:
                    throw new Sayari.MethodNotAllowed(
                        serializers.MethodNotAllowedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Sayari.RateLimitExceeded(
                        serializers.RateLimitResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Sayari.InternalServerError(
                        serializers.InternalServerErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 502:
                    throw new Sayari.BadGateway(
                        serializers.BadGatewayResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 520:
                    throw new Sayari.ConnectionError(
                        serializers.ConnectionErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SayariError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SayariError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SayariTimeoutError();
            case "unknown":
                throw new errors.SayariError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * The Ownership endpoint returns paths from a single target entity to up to 50 entities directly or indirectly owned by that entity. The endpoint is a shorthand for the equivalent traversal query.
     *
     * @param {string} id - Unique identifier of the entity
     * @param {Sayari.Ownership} request
     * @param {Traversal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sayari.BadRequest}
     * @throws {@link Sayari.Unauthorized}
     * @throws {@link Sayari.NotFound}
     * @throws {@link Sayari.MethodNotAllowed}
     * @throws {@link Sayari.RateLimitExceeded}
     * @throws {@link Sayari.InternalServerError}
     * @throws {@link Sayari.BadGateway}
     * @throws {@link Sayari.ConnectionError}
     *
     * @example
     *     await client.traversal.ownership("mGq1lpuqKssNWTjIokuPeA", {
     *         limit: 1
     *     })
     */
    public async ownership(
        id: string,
        request: Sayari.Ownership = {},
        requestOptions?: Traversal.RequestOptions
    ): Promise<Sayari.TraversalResponse> {
        const {
            limit,
            offset,
            minDepth,
            maxDepth,
            relationships,
            psa,
            countries,
            types,
            sanctioned,
            pep,
            minShares,
            includeUnknownShares,
            excludeFormerRelationships,
            excludeClosedEntities,
            euHighRiskThird,
            reputationalRiskModernSlavery,
            stateOwned,
            formerlySanctioned,
            reputationalRiskTerrorism,
            reputationalRiskOrganizedCrime,
            reputationalRiskFinancialCrime,
            reputationalRiskBriberyAndCorruption,
            reputationalRiskOther,
            reputationalRiskCybercrime,
            regulatoryAction,
            lawEnforcementAction,
            xinjiangGeospatial,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (minDepth != null) {
            _queryParams["min_depth"] = minDepth.toString();
        }

        if (maxDepth != null) {
            _queryParams["max_depth"] = maxDepth.toString();
        }

        if (relationships != null) {
            if (Array.isArray(relationships)) {
                _queryParams["relationships"] = relationships.map((item) => item);
            } else {
                _queryParams["relationships"] = relationships;
            }
        }

        if (psa != null) {
            _queryParams["psa"] = psa.toString();
        }

        if (countries != null) {
            if (Array.isArray(countries)) {
                _queryParams["countries"] = countries.map((item) => item);
            } else {
                _queryParams["countries"] = countries;
            }
        }

        if (types != null) {
            if (Array.isArray(types)) {
                _queryParams["types"] = types.map((item) => item);
            } else {
                _queryParams["types"] = types;
            }
        }

        if (sanctioned != null) {
            _queryParams["sanctioned"] = sanctioned.toString();
        }

        if (pep != null) {
            _queryParams["pep"] = pep.toString();
        }

        if (minShares != null) {
            _queryParams["min_shares"] = minShares.toString();
        }

        if (includeUnknownShares != null) {
            _queryParams["include_unknown_shares"] = includeUnknownShares.toString();
        }

        if (excludeFormerRelationships != null) {
            _queryParams["exclude_former_relationships"] = excludeFormerRelationships.toString();
        }

        if (excludeClosedEntities != null) {
            _queryParams["exclude_closed_entities"] = excludeClosedEntities.toString();
        }

        if (euHighRiskThird != null) {
            _queryParams["eu_high_risk_third"] = euHighRiskThird.toString();
        }

        if (reputationalRiskModernSlavery != null) {
            _queryParams["reputational_risk_modern_slavery"] = reputationalRiskModernSlavery.toString();
        }

        if (stateOwned != null) {
            _queryParams["state_owned"] = stateOwned.toString();
        }

        if (formerlySanctioned != null) {
            _queryParams["formerly_sanctioned"] = formerlySanctioned.toString();
        }

        if (reputationalRiskTerrorism != null) {
            _queryParams["reputational_risk_terrorism"] = reputationalRiskTerrorism.toString();
        }

        if (reputationalRiskOrganizedCrime != null) {
            _queryParams["reputational_risk_organized_crime"] = reputationalRiskOrganizedCrime.toString();
        }

        if (reputationalRiskFinancialCrime != null) {
            _queryParams["reputational_risk_financial_crime"] = reputationalRiskFinancialCrime.toString();
        }

        if (reputationalRiskBriberyAndCorruption != null) {
            _queryParams["reputational_risk_bribery_and_corruption"] = reputationalRiskBriberyAndCorruption.toString();
        }

        if (reputationalRiskOther != null) {
            _queryParams["reputational_risk_other"] = reputationalRiskOther.toString();
        }

        if (reputationalRiskCybercrime != null) {
            _queryParams["reputational_risk_cybercrime"] = reputationalRiskCybercrime.toString();
        }

        if (regulatoryAction != null) {
            _queryParams["regulatory_action"] = regulatoryAction.toString();
        }

        if (lawEnforcementAction != null) {
            _queryParams["law_enforcement_action"] = lawEnforcementAction.toString();
        }

        if (xinjiangGeospatial != null) {
            _queryParams["xinjiang_geospatial"] = xinjiangGeospatial.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SayariEnvironment.Production,
                `/v1/downstream/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sayari/sdk",
                "X-Fern-SDK-Version": "0.1.25",
                "User-Agent": "@sayari/sdk/0.1.25",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TraversalResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sayari.BadRequest(
                        serializers.BadRequestResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new Sayari.Unauthorized(
                        serializers.UnauthorizedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Sayari.NotFound(
                        serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 405:
                    throw new Sayari.MethodNotAllowed(
                        serializers.MethodNotAllowedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Sayari.RateLimitExceeded(
                        serializers.RateLimitResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Sayari.InternalServerError(
                        serializers.InternalServerErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 502:
                    throw new Sayari.BadGateway(
                        serializers.BadGatewayResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 520:
                    throw new Sayari.ConnectionError(
                        serializers.ConnectionErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SayariError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SayariError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SayariTimeoutError();
            case "unknown":
                throw new errors.SayariError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * The Watchlist endpoint returns paths from a single target entity to up to 50 other entities that appear on a watchlist. The endpoint is a shorthand for the equivalent traversal query.
     *
     * @param {string} id - Unique identifier of the entity
     * @param {Sayari.Watchlist} request
     * @param {Traversal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sayari.BadRequest}
     * @throws {@link Sayari.Unauthorized}
     * @throws {@link Sayari.NotFound}
     * @throws {@link Sayari.MethodNotAllowed}
     * @throws {@link Sayari.RateLimitExceeded}
     * @throws {@link Sayari.InternalServerError}
     * @throws {@link Sayari.BadGateway}
     * @throws {@link Sayari.ConnectionError}
     *
     * @example
     *     await client.traversal.watchlist("mGq1lpuqKssNWTjIokuPeA", {
     *         limit: 1
     *     })
     */
    public async watchlist(
        id: string,
        request: Sayari.Watchlist = {},
        requestOptions?: Traversal.RequestOptions
    ): Promise<Sayari.TraversalResponse> {
        const {
            limit,
            offset,
            minDepth,
            maxDepth,
            relationships,
            psa,
            countries,
            types,
            sanctioned,
            pep,
            minShares,
            includeUnknownShares,
            excludeFormerRelationships,
            excludeClosedEntities,
            euHighRiskThird,
            reputationalRiskModernSlavery,
            stateOwned,
            formerlySanctioned,
            reputationalRiskTerrorism,
            reputationalRiskOrganizedCrime,
            reputationalRiskFinancialCrime,
            reputationalRiskBriberyAndCorruption,
            reputationalRiskOther,
            reputationalRiskCybercrime,
            regulatoryAction,
            lawEnforcementAction,
            xinjiangGeospatial,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (minDepth != null) {
            _queryParams["min_depth"] = minDepth.toString();
        }

        if (maxDepth != null) {
            _queryParams["max_depth"] = maxDepth.toString();
        }

        if (relationships != null) {
            if (Array.isArray(relationships)) {
                _queryParams["relationships"] = relationships.map((item) => item);
            } else {
                _queryParams["relationships"] = relationships;
            }
        }

        if (psa != null) {
            _queryParams["psa"] = psa.toString();
        }

        if (countries != null) {
            if (Array.isArray(countries)) {
                _queryParams["countries"] = countries.map((item) => item);
            } else {
                _queryParams["countries"] = countries;
            }
        }

        if (types != null) {
            if (Array.isArray(types)) {
                _queryParams["types"] = types.map((item) => item);
            } else {
                _queryParams["types"] = types;
            }
        }

        if (sanctioned != null) {
            _queryParams["sanctioned"] = sanctioned.toString();
        }

        if (pep != null) {
            _queryParams["pep"] = pep.toString();
        }

        if (minShares != null) {
            _queryParams["min_shares"] = minShares.toString();
        }

        if (includeUnknownShares != null) {
            _queryParams["include_unknown_shares"] = includeUnknownShares.toString();
        }

        if (excludeFormerRelationships != null) {
            _queryParams["exclude_former_relationships"] = excludeFormerRelationships.toString();
        }

        if (excludeClosedEntities != null) {
            _queryParams["exclude_closed_entities"] = excludeClosedEntities.toString();
        }

        if (euHighRiskThird != null) {
            _queryParams["eu_high_risk_third"] = euHighRiskThird.toString();
        }

        if (reputationalRiskModernSlavery != null) {
            _queryParams["reputational_risk_modern_slavery"] = reputationalRiskModernSlavery.toString();
        }

        if (stateOwned != null) {
            _queryParams["state_owned"] = stateOwned.toString();
        }

        if (formerlySanctioned != null) {
            _queryParams["formerly_sanctioned"] = formerlySanctioned.toString();
        }

        if (reputationalRiskTerrorism != null) {
            _queryParams["reputational_risk_terrorism"] = reputationalRiskTerrorism.toString();
        }

        if (reputationalRiskOrganizedCrime != null) {
            _queryParams["reputational_risk_organized_crime"] = reputationalRiskOrganizedCrime.toString();
        }

        if (reputationalRiskFinancialCrime != null) {
            _queryParams["reputational_risk_financial_crime"] = reputationalRiskFinancialCrime.toString();
        }

        if (reputationalRiskBriberyAndCorruption != null) {
            _queryParams["reputational_risk_bribery_and_corruption"] = reputationalRiskBriberyAndCorruption.toString();
        }

        if (reputationalRiskOther != null) {
            _queryParams["reputational_risk_other"] = reputationalRiskOther.toString();
        }

        if (reputationalRiskCybercrime != null) {
            _queryParams["reputational_risk_cybercrime"] = reputationalRiskCybercrime.toString();
        }

        if (regulatoryAction != null) {
            _queryParams["regulatory_action"] = regulatoryAction.toString();
        }

        if (lawEnforcementAction != null) {
            _queryParams["law_enforcement_action"] = lawEnforcementAction.toString();
        }

        if (xinjiangGeospatial != null) {
            _queryParams["xinjiang_geospatial"] = xinjiangGeospatial.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SayariEnvironment.Production,
                `/v1/watchlist/${encodeURIComponent(id)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sayari/sdk",
                "X-Fern-SDK-Version": "0.1.25",
                "User-Agent": "@sayari/sdk/0.1.25",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TraversalResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sayari.BadRequest(
                        serializers.BadRequestResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new Sayari.Unauthorized(
                        serializers.UnauthorizedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Sayari.NotFound(
                        serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 405:
                    throw new Sayari.MethodNotAllowed(
                        serializers.MethodNotAllowedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Sayari.RateLimitExceeded(
                        serializers.RateLimitResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Sayari.InternalServerError(
                        serializers.InternalServerErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 502:
                    throw new Sayari.BadGateway(
                        serializers.BadGatewayResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 520:
                    throw new Sayari.ConnectionError(
                        serializers.ConnectionErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SayariError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SayariError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SayariTimeoutError();
            case "unknown":
                throw new errors.SayariError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * The Shortest Path endpoint returns a response identifying the shortest traversal path connecting each pair of entities.
     *
     * @param {Sayari.ShortestPath} request
     * @param {Traversal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sayari.BadRequest}
     * @throws {@link Sayari.Unauthorized}
     * @throws {@link Sayari.NotFound}
     * @throws {@link Sayari.MethodNotAllowed}
     * @throws {@link Sayari.RateLimitExceeded}
     * @throws {@link Sayari.InternalServerError}
     * @throws {@link Sayari.BadGateway}
     * @throws {@link Sayari.ConnectionError}
     *
     * @example
     *     await client.traversal.shortestPath({
     *         entities: "H1y25N5ymnFyZ-q9Lpwm_g&entities=xthsA_jQuKn3GW8-9ILQqg"
     *     })
     */
    public async shortestPath(
        request: Sayari.ShortestPath,
        requestOptions?: Traversal.RequestOptions
    ): Promise<Sayari.ShortestPathResponse> {
        const { entities } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (Array.isArray(entities)) {
            _queryParams["entities"] = entities.map((item) => item);
        } else {
            _queryParams["entities"] = entities;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SayariEnvironment.Production,
                "/v1/shortest_path"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sayari/sdk",
                "X-Fern-SDK-Version": "0.1.25",
                "User-Agent": "@sayari/sdk/0.1.25",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.ShortestPathResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sayari.BadRequest(
                        serializers.BadRequestResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new Sayari.Unauthorized(
                        serializers.UnauthorizedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Sayari.NotFound(
                        serializers.NotFoundResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 405:
                    throw new Sayari.MethodNotAllowed(
                        serializers.MethodNotAllowedResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Sayari.RateLimitExceeded(
                        serializers.RateLimitResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new Sayari.InternalServerError(
                        serializers.InternalServerErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 502:
                    throw new Sayari.BadGateway(
                        serializers.BadGatewayResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 520:
                    throw new Sayari.ConnectionError(
                        serializers.ConnectionErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SayariError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SayariError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SayariTimeoutError();
            case "unknown":
                throw new errors.SayariError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
