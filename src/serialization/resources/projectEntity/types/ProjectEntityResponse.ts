/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Sayari from "../../../../api/index";
import * as core from "../../../../core";
import { MatchStrengthEnum } from "./MatchStrengthEnum";
import { AttributeValues } from "./AttributeValues";
import { ProductMapping } from "./ProductMapping";
import { ProjectEntityMatchResponse } from "./ProjectEntityMatchResponse";
import { TagResponse } from "./TagResponse";
import { CaseStatus } from "./CaseStatus";

export const ProjectEntityResponse: core.serialization.ObjectSchema<
    serializers.ProjectEntityResponse.Raw,
    Sayari.ProjectEntityResponse
> = core.serialization.object({
    projectEntityId: core.serialization.property("project_entity_id", core.serialization.string()),
    projectId: core.serialization.property("project_id", core.serialization.string()),
    label: core.serialization.string(),
    uploadIds: core.serialization.property("upload_ids", core.serialization.list(core.serialization.string())),
    strength: MatchStrengthEnum,
    createdAt: core.serialization.property("created_at", core.serialization.string()),
    attributes: core.serialization.record(core.serialization.string(), AttributeValues),
    productMapping: core.serialization.property("product_mapping", ProductMapping.optional()),
    matches: core.serialization.list(ProjectEntityMatchResponse),
    tags: core.serialization.list(TagResponse),
    case: CaseStatus.optional(),
    updatedAt: core.serialization.property("updated_at", core.serialization.string().optional()),
});

export declare namespace ProjectEntityResponse {
    export interface Raw {
        project_entity_id: string;
        project_id: string;
        label: string;
        upload_ids: string[];
        strength: MatchStrengthEnum.Raw;
        created_at: string;
        attributes: Record<string, AttributeValues.Raw>;
        product_mapping?: ProductMapping.Raw | null;
        matches: ProjectEntityMatchResponse.Raw[];
        tags: TagResponse.Raw[];
        case?: CaseStatus.Raw | null;
        updated_at?: string | null;
    }
}
