/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Sayari from "../../../../api/index";
import * as core from "../../../../core";
import { Risk } from "../../generatedTypes/types/Risk";
import { Country } from "../../generatedTypes/types/Country";
import { ProjectEntitiesFuzzyFilter } from "./ProjectEntitiesFuzzyFilter";
import { ProjectEntitiesExactFilter } from "./ProjectEntitiesExactFilter";
import { CompanyStatus } from "../../generatedTypes/types/CompanyStatus";
import { CaseStatus } from "../../sharedTypes/types/CaseStatus";
import { MatchStrengthEnum } from "../../sharedTypes/types/MatchStrengthEnum";
import { MatchCount } from "../../sharedTypes/types/MatchCount";
import { ProjectEntitiesCustomFieldFilter } from "./ProjectEntitiesCustomFieldFilter";

export const ProjectEntitiesFilter: core.serialization.ObjectSchema<
    serializers.ProjectEntitiesFilter.Raw,
    Sayari.ProjectEntitiesFilter
> = core.serialization.object({
    riskFactor: core.serialization.property("risk_factor", core.serialization.list(Risk).optional()),
    riskCategory: core.serialization.property(
        "risk_category",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    upstreamProduct: core.serialization.property(
        "upstream_product",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    shipmentCountry: core.serialization.property("shipment_country", core.serialization.list(Country).optional()),
    tier1ShipmentCountry: core.serialization.property(
        "tier1_shipment_country",
        core.serialization.list(Country).optional(),
    ),
    tier2ShipmentCountry: core.serialization.property(
        "tier2_shipment_country",
        core.serialization.list(Country).optional(),
    ),
    tier3ShipmentCountry: core.serialization.property(
        "tier3_shipment_country",
        core.serialization.list(Country).optional(),
    ),
    tier4ShipmentCountry: core.serialization.property(
        "tier4_shipment_country",
        core.serialization.list(Country).optional(),
    ),
    tier5ShipmentCountry: core.serialization.property(
        "tier5_shipment_country",
        core.serialization.list(Country).optional(),
    ),
    country: core.serialization.list(Country).optional(),
    businessPurpose: core.serialization.property(
        "business_purpose",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    label: ProjectEntitiesFuzzyFilter.optional(),
    city: ProjectEntitiesFuzzyFilter.optional(),
    state: ProjectEntitiesFuzzyFilter.optional(),
    identifier: ProjectEntitiesFuzzyFilter.optional(),
    source: ProjectEntitiesExactFilter.optional(),
    status: core.serialization.list(CompanyStatus).optional(),
    bounds: core.serialization.string().optional(),
    matchEntityId: core.serialization.property(
        "match_entity_id",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    entityType: core.serialization.property(
        "entity_type",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    tag: core.serialization.list(core.serialization.string()).optional(),
    upload: core.serialization.list(core.serialization.string()).optional(),
    caseStatus: core.serialization.property("case_status", core.serialization.list(CaseStatus).optional()),
    matchStrength: core.serialization.property("match_strength", core.serialization.list(MatchStrengthEnum).optional()),
    matchCount: core.serialization.property("match_count", MatchCount.optional()),
    attribute: ProjectEntitiesCustomFieldFilter.optional(),
});

export declare namespace ProjectEntitiesFilter {
    export interface Raw {
        risk_factor?: Risk.Raw[] | null;
        risk_category?: string[] | null;
        upstream_product?: string[] | null;
        shipment_country?: Country.Raw[] | null;
        tier1_shipment_country?: Country.Raw[] | null;
        tier2_shipment_country?: Country.Raw[] | null;
        tier3_shipment_country?: Country.Raw[] | null;
        tier4_shipment_country?: Country.Raw[] | null;
        tier5_shipment_country?: Country.Raw[] | null;
        country?: Country.Raw[] | null;
        business_purpose?: string[] | null;
        label?: ProjectEntitiesFuzzyFilter.Raw | null;
        city?: ProjectEntitiesFuzzyFilter.Raw | null;
        state?: ProjectEntitiesFuzzyFilter.Raw | null;
        identifier?: ProjectEntitiesFuzzyFilter.Raw | null;
        source?: ProjectEntitiesExactFilter.Raw | null;
        status?: CompanyStatus.Raw[] | null;
        bounds?: string | null;
        match_entity_id?: string[] | null;
        entity_type?: string[] | null;
        tag?: string[] | null;
        upload?: string[] | null;
        case_status?: CaseStatus.Raw[] | null;
        match_strength?: MatchStrengthEnum.Raw[] | null;
        match_count?: MatchCount.Raw | null;
        attribute?: ProjectEntitiesCustomFieldFilter.Raw | null;
    }
}
