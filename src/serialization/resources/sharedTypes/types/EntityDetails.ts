/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SayariAnalyticsApi from "../../../../api";
import * as core from "../../../../core";

export const EntityDetails: core.serialization.ObjectSchema<
    serializers.EntityDetails.Raw,
    SayariAnalyticsApi.EntityDetails
> = core.serialization
    .object({
        registrationDate: core.serialization.property(
            "registration_date",
            core.serialization.lazy(async () => (await import("../../..")).EntityRegistrationDate).optional()
        ),
        translatedLabel: core.serialization.property(
            "translated_label",
            core.serialization.lazy(async () => (await import("../../..")).EntityTranslatedLabel).optional()
        ),
        hsCode: core.serialization.property(
            "hs_code",
            core.serialization.lazy(async () => (await import("../../..")).EntityHsCode).optional()
        ),
        shipmentArrival: core.serialization.property(
            "shipment_arrival",
            core.serialization.lazy(async () => (await import("../../..")).ShipmentArrival).optional()
        ),
        shipmentDeparture: core.serialization.property(
            "shipment_departure",
            core.serialization.lazy(async () => (await import("../../..")).ShipmentDepartue).optional()
        ),
        companyType: core.serialization.property(
            "company_type",
            core.serialization.lazy(async () => (await import("../../..")).CompanyType).optional()
        ),
        latestStatus: core.serialization.property(
            "latest_status",
            core.serialization.lazyObject(async () => (await import("../../..")).Status).optional()
        ),
        risk: core.serialization.lazy(async () => (await import("../../..")).EntityRisk),
        attributes: core.serialization.lazyObject(async () => (await import("../../..")).AttributeDetails).optional(),
        relationships: core.serialization
            .lazyObject(async () => (await import("../../..")).EntityRelationships)
            .optional(),
        possiblySameAs: core.serialization.property(
            "possibly_same_as",
            core.serialization.lazyObject(async () => (await import("../../..")).PossiblySameAs).optional()
        ),
        referencedBy: core.serialization.property(
            "referenced_by",
            core.serialization.lazyObject(async () => (await import("../../..")).ReferencedBy).optional()
        ),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../..")).EmbeddedEntity));

export declare namespace EntityDetails {
    interface Raw extends serializers.EmbeddedEntity.Raw {
        registration_date?: serializers.EntityRegistrationDate.Raw | null;
        translated_label?: serializers.EntityTranslatedLabel.Raw | null;
        hs_code?: serializers.EntityHsCode.Raw | null;
        shipment_arrival?: serializers.ShipmentArrival.Raw | null;
        shipment_departure?: serializers.ShipmentDepartue.Raw | null;
        company_type?: serializers.CompanyType.Raw | null;
        latest_status?: serializers.Status.Raw | null;
        risk: serializers.EntityRisk.Raw;
        attributes?: serializers.AttributeDetails.Raw | null;
        relationships?: serializers.EntityRelationships.Raw | null;
        possibly_same_as?: serializers.PossiblySameAs.Raw | null;
        referenced_by?: serializers.ReferencedBy.Raw | null;
    }
}
