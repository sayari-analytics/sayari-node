/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SayariAnalyticsApi from "../../../../api";
import * as core from "../../../../core";

export const EmbeddedEntity: core.serialization.ObjectSchema<
    serializers.EmbeddedEntity.Raw,
    SayariAnalyticsApi.EmbeddedEntity
> = core.serialization.object({
    id: core.serialization.lazy(async () => (await import("../../..")).EntityId),
    label: core.serialization.string(),
    degree: core.serialization.number(),
    closed: core.serialization.boolean(),
    entityUrl: core.serialization.property("entity_url", core.serialization.string()),
    pep: core.serialization.boolean(),
    psaId: core.serialization.property("psa_id", core.serialization.string().optional()),
    psaCount: core.serialization.property("psa_count", core.serialization.number()),
    sanctioned: core.serialization.boolean(),
    type: core.serialization.lazy(async () => (await import("../../..")).Entities),
    identifiers: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../..")).Identifier)
    ),
    countries: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).Country)),
    sourceCount: core.serialization.property(
        "source_count",
        core.serialization.record(
            core.serialization.string(),
            core.serialization.lazyObject(async () => (await import("../../..")).SourceCountInfo)
        )
    ),
    addresses: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).EntityAddresses)),
    dateOfBirth: core.serialization.property(
        "date_of_birth",
        core.serialization.lazy(async () => (await import("../../..")).EntityDob).optional()
    ),
    relationshipCount: core.serialization.property(
        "relationship_count",
        core.serialization.lazy(async () => (await import("../../..")).EntityRelationshipCount)
    ),
    userRelationshipCount: core.serialization.property(
        "user_relationship_count",
        core.serialization.lazy(async () => (await import("../../..")).EntityRelationshipCount)
    ),
    attributeCounts: core.serialization.property("attribute_counts", core.serialization.unknown()),
    userAttributeCounts: core.serialization.property("user_attribute_counts", core.serialization.unknown()),
    relatedEntitiesCount: core.serialization.property("related_entities_count", core.serialization.number()),
    userRelatedEntitiesCount: core.serialization.property("user_related_entities_count", core.serialization.number()),
    userRecordCount: core.serialization.property("user_record_count", core.serialization.number()),
});

export declare namespace EmbeddedEntity {
    interface Raw {
        id: serializers.EntityId.Raw;
        label: string;
        degree: number;
        closed: boolean;
        entity_url: string;
        pep: boolean;
        psa_id?: string | null;
        psa_count: number;
        sanctioned: boolean;
        type: serializers.Entities.Raw;
        identifiers: serializers.Identifier.Raw[];
        countries: serializers.Country.Raw[];
        source_count: Record<string, serializers.SourceCountInfo.Raw>;
        addresses: serializers.EntityAddresses.Raw[];
        date_of_birth?: serializers.EntityDob.Raw | null;
        relationship_count: serializers.EntityRelationshipCount.Raw;
        user_relationship_count: serializers.EntityRelationshipCount.Raw;
        attribute_counts?: unknown;
        user_attribute_counts?: unknown;
        related_entities_count: number;
        user_related_entities_count: number;
        user_record_count: number;
    }
}
