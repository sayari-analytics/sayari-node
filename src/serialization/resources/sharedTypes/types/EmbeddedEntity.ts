/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Sayari from "../../../../api/index";
import * as core from "../../../../core";
import { Entities } from "../../generatedTypes/types/Entities";
import { Identifier } from "./Identifier";
import { Country } from "../../generatedTypes/types/Country";
import { SourceCountInfo } from "./SourceCountInfo";
import { RelationshipCount } from "./RelationshipCount";
import { Attributes } from "../../generatedTypes/types/Attributes";
import { Relationships } from "../../generatedTypes/types/Relationships";

export const EmbeddedEntity: core.serialization.ObjectSchema<serializers.EmbeddedEntity.Raw, Sayari.EmbeddedEntity> =
    core.serialization.object({
        id: core.serialization.string(),
        label: core.serialization.string(),
        degree: core.serialization.number(),
        closed: core.serialization.boolean(),
        entityUrl: core.serialization.property("entity_url", core.serialization.string()),
        pep: core.serialization.boolean(),
        psaId: core.serialization.property("psa_id", core.serialization.string().optional()),
        psaCount: core.serialization.property("psa_count", core.serialization.number()),
        sanctioned: core.serialization.boolean(),
        type: Entities,
        identifiers: core.serialization.list(Identifier),
        countries: core.serialization.list(Country),
        sourceCount: core.serialization.property(
            "source_count",
            core.serialization.record(core.serialization.string(), SourceCountInfo)
        ),
        addresses: core.serialization.list(core.serialization.string()),
        tradeCount: core.serialization.property(
            "trade_count",
            core.serialization.record(core.serialization.string(), core.serialization.number())
        ),
        dateOfBirth: core.serialization.property("date_of_birth", core.serialization.string().optional()),
        relationshipCount: core.serialization.property("relationship_count", RelationshipCount),
        userRelationshipCount: core.serialization.property("user_relationship_count", RelationshipCount),
        attributeCount: core.serialization.property(
            "attribute_count",
            core.serialization.record(Attributes, core.serialization.number().optional())
        ),
        userAttributeCount: core.serialization.property(
            "user_attribute_count",
            core.serialization.record(Attributes, core.serialization.number().optional())
        ),
        relatedEntitiesCount: core.serialization.property("related_entities_count", core.serialization.number()),
        userRelatedEntitiesCount: core.serialization.property(
            "user_related_entities_count",
            core.serialization.number()
        ),
        userRecordCount: core.serialization.property("user_record_count", core.serialization.number()),
        referenceId: core.serialization.property("reference_id", core.serialization.string().optional()),
    });

export declare namespace EmbeddedEntity {
    interface Raw {
        id: string;
        label: string;
        degree: number;
        closed: boolean;
        entity_url: string;
        pep: boolean;
        psa_id?: string | null;
        psa_count: number;
        sanctioned: boolean;
        type: Entities.Raw;
        identifiers: Identifier.Raw[];
        countries: Country.Raw[];
        source_count: Record<string, SourceCountInfo.Raw>;
        addresses: string[];
        trade_count: Record<string, number>;
        date_of_birth?: string | null;
        relationship_count: RelationshipCount.Raw;
        user_relationship_count: RelationshipCount.Raw;
        attribute_count: Record<Attributes.Raw, number | null | undefined>;
        user_attribute_count: Record<Attributes.Raw, number | null | undefined>;
        related_entities_count: number;
        user_related_entities_count: number;
        user_record_count: number;
        reference_id?: string | null;
    }
}
