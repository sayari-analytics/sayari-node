/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SayariAnalyticsApi from "../../../../api";
import * as core from "../../../../core";

export const ResolutionResult: core.serialization.ObjectSchema<
    serializers.ResolutionResult.Raw,
    SayariAnalyticsApi.ResolutionResult
> = core.serialization.object({
    score: core.serialization.number(),
    entityId: core.serialization.property("entity_id", core.serialization.string()),
    label: core.serialization.string(),
    type: core.serialization.lazy(async () => (await import("../../..")).Entities),
    identifiers: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../..")).Identifier)
    ),
    psaId: core.serialization.property("psa_id", core.serialization.number().optional()),
    addresses: core.serialization.list(core.serialization.string()),
    countries: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).Country)),
    sources: core.serialization.list(core.serialization.string()),
    typedMatchedQueries: core.serialization.property(
        "typed_matched_queries",
        core.serialization.list(core.serialization.string())
    ),
    matchedQueries: core.serialization.property(
        "matched_queries",
        core.serialization.list(core.serialization.string())
    ),
    highlight: core.serialization.record(
        core.serialization.string(),
        core.serialization.list(core.serialization.string())
    ),
    explanation: core.serialization.record(
        core.serialization.string(),
        core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).MatchExplanation))
    ),
});

export declare namespace ResolutionResult {
    interface Raw {
        score: number;
        entity_id: string;
        label: string;
        type: serializers.Entities.Raw;
        identifiers: serializers.Identifier.Raw[];
        psa_id?: number | null;
        addresses: string[];
        countries: serializers.Country.Raw[];
        sources: string[];
        typed_matched_queries: string[];
        matched_queries: string[];
        highlight: Record<string, string[]>;
        explanation: Record<string, serializers.MatchExplanation.Raw[]>;
    }
}
