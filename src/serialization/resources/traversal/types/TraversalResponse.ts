/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SayariAnalyticsApi from "../../../../api";
import * as core from "../../../../core";

export const TraversalResponse: core.serialization.ObjectSchema<
    serializers.TraversalResponse.Raw,
    SayariAnalyticsApi.TraversalResponse
> = core.serialization.object({
    minDepth: core.serialization.property("min_depth", core.serialization.number()),
    maxDepth: core.serialization.property("max_depth", core.serialization.number()),
    relationships: core.serialization.list(
        core.serialization.lazy(async () => (await import("../../..")).Relationships)
    ),
    countries: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).Country)),
    types: core.serialization.list(core.serialization.string()),
    name: core.serialization.string(),
    watchlist: core.serialization.boolean(),
    psa: core.serialization.boolean(),
    offset: core.serialization.number(),
    limit: core.serialization.number(),
    next: core.serialization.boolean(),
    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).TraversalData)),
    sanctioned: core.serialization.boolean().optional(),
    pep: core.serialization.boolean().optional(),
    exploredCount: core.serialization.property("explored_count", core.serialization.number()),
});

export declare namespace TraversalResponse {
    interface Raw {
        min_depth: number;
        max_depth: number;
        relationships: serializers.Relationships.Raw[];
        countries: serializers.Country.Raw[];
        types: string[];
        name: string;
        watchlist: boolean;
        psa: boolean;
        offset: number;
        limit: number;
        next: boolean;
        data: serializers.TraversalData.Raw[];
        sanctioned?: boolean | null;
        pep?: boolean | null;
        explored_count: number;
    }
}
