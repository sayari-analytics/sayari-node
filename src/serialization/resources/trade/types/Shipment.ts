/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Sayari from "../../../../api/index";
import * as core from "../../../../core";
import { SourceOrDestinationEntity } from "./SourceOrDestinationEntity";
import { ShipmentAddress } from "./ShipmentAddress";
import { Country } from "../../generatedTypes/types/Country";
import { MonetaryValue } from "./MonetaryValue";
import { Weight } from "./Weight";
import { ShipmentIdentifier } from "./ShipmentIdentifier";
import { DataSource } from "./DataSource";
import { HsCodeInfo } from "./HsCodeInfo";

export const Shipment: core.serialization.ObjectSchema<serializers.Shipment.Raw, Sayari.Shipment> =
    core.serialization.object({
        id: core.serialization.string(),
        type: core.serialization.string(),
        buyer: core.serialization.list(SourceOrDestinationEntity),
        supplier: core.serialization.list(SourceOrDestinationEntity),
        arrivalDate: core.serialization.property(
            "arrival_date",
            core.serialization.list(core.serialization.string()).optional()
        ),
        departureDate: core.serialization.property(
            "departure_date",
            core.serialization.list(core.serialization.string()).optional()
        ),
        departureAddress: core.serialization.property("departure_address", ShipmentAddress.optional()),
        arrivalAddress: core.serialization.property("arrival_address", ShipmentAddress.optional()),
        arrivalCountry: core.serialization.property("arrival_country", core.serialization.list(Country)),
        departureCountry: core.serialization.property("departure_country", core.serialization.list(Country)),
        transitCountry: core.serialization.property("transit_country", core.serialization.list(Country)),
        countries: core.serialization.list(Country),
        productOrigin: core.serialization.property("product_origin", core.serialization.list(Country)),
        monetaryValue: core.serialization.property("monetary_value", core.serialization.list(MonetaryValue)),
        weight: core.serialization.list(Weight),
        identifier: core.serialization.list(ShipmentIdentifier),
        sources: core.serialization.list(DataSource),
        hsCodes: core.serialization.property("hs_codes", core.serialization.list(HsCodeInfo)),
        productDescriptions: core.serialization.property(
            "product_descriptions",
            core.serialization.list(core.serialization.string())
        ),
        record: core.serialization.string(),
    });

export declare namespace Shipment {
    interface Raw {
        id: string;
        type: string;
        buyer: SourceOrDestinationEntity.Raw[];
        supplier: SourceOrDestinationEntity.Raw[];
        arrival_date?: string[] | null;
        departure_date?: string[] | null;
        departure_address?: ShipmentAddress.Raw | null;
        arrival_address?: ShipmentAddress.Raw | null;
        arrival_country: Country.Raw[];
        departure_country: Country.Raw[];
        transit_country: Country.Raw[];
        countries: Country.Raw[];
        product_origin: Country.Raw[];
        monetary_value: MonetaryValue.Raw[];
        weight: Weight.Raw[];
        identifier: ShipmentIdentifier.Raw[];
        sources: DataSource.Raw[];
        hs_codes: HsCodeInfo.Raw[];
        product_descriptions: string[];
        record: string;
    }
}
