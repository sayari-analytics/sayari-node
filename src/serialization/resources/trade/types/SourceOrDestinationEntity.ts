/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SayariAnalyticsApi from "../../../../api";
import * as core from "../../../../core";

export const SourceOrDestinationEntity: core.serialization.ObjectSchema<
    serializers.SourceOrDestinationEntity.Raw,
    SayariAnalyticsApi.SourceOrDestinationEntity
> = core.serialization.object({
    id: core.serialization.lazy(async () => (await import("../../..")).EntityId),
    names: core.serialization.list(core.serialization.string()),
    risks: core.serialization.record(
        core.serialization.lazy(async () => (await import("../../..")).Risk),
        core.serialization.unknown()
    ),
    businessPurpose: core.serialization.property(
        "business_purpose",
        core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).BusinessPurpose))
    ),
    countries: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).Country)),
});

export declare namespace SourceOrDestinationEntity {
    interface Raw {
        id: serializers.EntityId.Raw;
        names: string[];
        risks: Record<serializers.Risk.Raw, unknown>;
        business_purpose: serializers.BusinessPurpose.Raw[];
        countries: serializers.Country.Raw[];
    }
}
