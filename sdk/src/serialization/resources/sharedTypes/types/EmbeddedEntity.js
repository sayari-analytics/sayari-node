/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as core from "../../../../core/index.js";
export const EmbeddedEntity = core.serialization.object({
    id: core.serialization.lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../../index.js")).EntityId; })),
    label: core.serialization.string(),
    degree: core.serialization.number(),
    closed: core.serialization.boolean(),
    entityUrl: core.serialization.property("entity_url", core.serialization.string()),
    pep: core.serialization.boolean(),
    psaCount: core.serialization.property("psa_count", core.serialization.number()),
    sanctioned: core.serialization.boolean(),
    type: core.serialization.lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../../index.js")).Entities; })),
    identifiers: core.serialization.list(core.serialization.lazyObject(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../../index.js")).Identifier; }))),
    countries: core.serialization.list(core.serialization.string()),
    psaSanctioned: core.serialization.property("psa_sanctioned", core.serialization.string().optional()),
    sourceCount: core.serialization.property("source_count", core.serialization.lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../../index.js")).SourceCount; }))),
    addresses: core.serialization.list(core.serialization.string()),
    dateOfBirth: core.serialization.property("date_of_birth", core.serialization.string().optional()),
    relationshipCount: core.serialization.property("relationship_count", core.serialization.record(core.serialization.lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../../index.js")).Relationships; })), core.serialization.number().optional())),
});
