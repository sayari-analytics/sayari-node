/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as core from "../../../../core";
export const TradeFilterList = core.serialization.object({
    buyerId: core.serialization.property("buyer_id", core.serialization.list(core.serialization.string()).optional()),
    supplierId: core.serialization.property("supplier_id", core.serialization.list(core.serialization.string()).optional()),
    buyerName: core.serialization.property("buyer_name", core.serialization.list(core.serialization.string()).optional()),
    supplierName: core.serialization.property("supplier_name", core.serialization.list(core.serialization.string()).optional()),
    buyerRisk: core.serialization.property("buyer_risk", core.serialization.list(core.serialization.string()).optional()),
    supplierRisk: core.serialization.property("supplier_risk", core.serialization.list(core.serialization.string()).optional()),
    buyerCountry: core.serialization.property("buyer_country", core.serialization.list(core.serialization.lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../..")).Country; }))).optional()),
    supplierCountry: core.serialization.property("supplier_country", core.serialization.list(core.serialization.lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../..")).Country; }))).optional()),
    departureCountry: core.serialization.property("departure_country", core.serialization.list(core.serialization.lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../..")).Country; }))).optional()),
    departureState: core.serialization.property("departure_state", core.serialization.list(core.serialization.string()).optional()),
    departureCity: core.serialization.property("departure_city", core.serialization.list(core.serialization.string()).optional()),
    arrivalCountry: core.serialization.property("arrival_country", core.serialization.list(core.serialization.lazy(() => __awaiter(void 0, void 0, void 0, function* () { return (yield import("../../..")).Country; }))).optional()),
    arrivalState: core.serialization.property("arrival_state", core.serialization.list(core.serialization.string()).optional()),
    arrivalCity: core.serialization.property("arrival_city", core.serialization.list(core.serialization.string()).optional()),
    hsCode: core.serialization.property("hs_code", core.serialization.list(core.serialization.string()).optional()),
    hsDescription: core.serialization.property("hs_description", core.serialization.list(core.serialization.string()).optional()),
    supplierPurpose: core.serialization.property("supplier_purpose", core.serialization.list(core.serialization.string()).optional()),
    buyerPurpose: core.serialization.property("buyer_purpose", core.serialization.list(core.serialization.string()).optional()),
    arrivalDate: core.serialization.property("arrival_date", core.serialization.list(core.serialization.string()).optional()),
    weight: core.serialization.list(core.serialization.string()).optional(),
    sources: core.serialization.list(core.serialization.string()).optional(),
});
